<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
	<!--Ctrl + Shift + T: 打开Open Type查找类文件 -->
	<!--加载 db.properties 文件 -->
	<bean id="config"
		class="org.springframework.beans.factory.config.PreferencesPlaceholderConfigurer">
          <property name="locations">
                 <array>
                        <value>classpath:db.properties</value>
                 </array>
          </property>
	</bean>
	
<!-- 生成  mapper 对象的   三种方式  -->
	
	<!--  第一种 方式 生成 mapper 对象  -->
<!-- 	<bean  id="studentMapper" class="org.shiwei.dao.Impl.StudentDaoImpl">
	将 Spring 配置的 sqlSessionFactory 对象 交给 mapper (dao)
	      是给 这个  实现类的  父类(SqlSessionDaoSupport)的 属性 赋值
	       <property name="sqlSessionFactory" ref="sqlSessionFact"></property>
	</bean>  -->
	
	
	
   <!--第二种 生成 mapper 对象的 方式 
               需要  告诉 中间 整合  jar 包当中的 MapperFactoryBean两个  参数，他才可以帮助我们 创建好 mapper 对象
                1. SqlSessionFactory ( 当中 是 数据库的 配置信息 )
                2. mapper 对象 所对应的 接口 的 类名.class , 因为 创建 mapper 对象需要
                  SqlSession.getMapper(接口名.class);  -->	
<!--     <bean id="studentMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">
           告诉别人帮我写好的那个实现类 我的 接口 在哪里 
         <property name="mapperInterface" value="org.shiwei.mapper.StudentMapper"></property>
         
         <property name="sqlSessionFactory" ref="sqlSessionFact"></property>
    </bean> -->
	
	
	<!-- 第三种 生成   mapper 对象的方式 (批量产生 mapper  对象 ， 并不是 单纯的 一个 mapper  对象 )  
	   批量产生的  Mapper 对象 在 Spring IOC 容器中 的id 值 默认 就是 (首字母小写)的接口名 (接口名 == id )
	   此时还要注意两点：
	    1。 sqlSessionFactoryBeanName 是个字符型的参数String ， 不是一个 引用类型。
	    2. 对 sqlSessionFactoryBeanName 属性赋值 ， 不能用 ref , 而是要用 value 
	          ,即使值 是一个 bean 的 id 值。
	-->
	<bean id="mappers" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
	   <property name="sqlSessionFactoryBeanName" value="sqlSessionFact"></property>
	   <!-- 指定 批量 产生   那个包中的   mapper 对象 ， 有点像  批量 产生 别名的 方式  
	   如果一次性 要扫描多个包 ， 包名和包名 之间 用 逗号 隔开。
	    例如：value="org.shiwei.mapper,org.shiwei.mapper_2,org.shiwei.wangmapper"
	   -->
	   <property name="basePackage" value="org.shiwei.mapper"></property>
	   
	</bean>
	
	
	
	
	<bean id="studentService" class="org.shiwei.service.impl.StudentServiceImpl">
	    <property name="studentMapper" ref="studentMapper"></property>
	</bean>
	
	
	



	<!-- 配置数据库信息 ( 替代 MyBatis 的配置文件 conf.xml) -->
	<!-- 交给了 Spring ,BasicDataSource 自动帮助我们 提交事务， 不需要 session.commit()  -->
	<bean id="dataSource"
		class="org.apache.commons.dbcp.BasicDataSource">
		<!-- 若name  属性报错， 说明 这个class 类中没有这个 属性 ，此时 就需要 进去 看一看    -->
		<property name="driverClassName" value="${driverClassName}"></property>
		<property name="url" value="${url}"></property>
		<property name="username" value="${username}"></property>
		<property name="password" value="${password}"></property>
		<property name="maxActive" value="${maxActive}"></property>
		<property name="maxIdle" value="${maxIdle}"></property>
	</bean>
	
	
	<!--在 Spring 容器中创建  MyBatis 的 核心类  SqlSessionFactory   -->
	<bean id="sqlSessionFact" class="org.mybatis.spring.SqlSessionFactoryBean">
	     <!-- 加载数据库源   -->
	     <property name="dataSource" ref="dataSource"></property>
	     
	     <!--加载 MyBatis    -->
	    <!--  <property name="configLocation"  value="classpath:conf.xml"></property> -->
	    
	     <!-- 加载 映射文件   的路径-->
	     <property name="mapperLocations" value="org/shiwei/mapper/studentMapper.xml"></property>
	     
	</bean>
	



</beans>
